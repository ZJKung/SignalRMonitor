@{
    ViewData["Title"] = "Home Page";
}
<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="~/js/vue/vue.global.js"></script>
<script src="~/js/axios/axios.min.js"></script>
<script src="~/js/chartjs/Chart.min.js"></script>

<body>
    <div class="text-center" id="app">
        <div>
            <span>CPU : {{stats.CPU}} % </span><span> Memory Usage : {{stats.RAM}} MB</span>
            <input type="button" value="Use Memory" @@click="useMemory()">
            <input type="button" value="Use CPU" @@click="useCPU()">
        </div>

        <div>
            <canvas id="cpu" style="width: 512px; height: 320px"></canvas>
            <canvas id="ram" style="width: 512px; height: 320px"></canvas>
        </div>

    </div>
</body>
<script>
    const { watch, onMounted, reactive } = Vue;
    const app = Vue.createApp({
        setup() {
            const connection = new signalR.HubConnectionBuilder().withUrl("/statsHub").build();
            const samples = 100;
            const speed = 250;
            const cpuValues = reactive([])
            const memValues = reactive([])
            const labels = [];
            labels.length = samples;
            labels.fill(0);
            cpuValues.length = samples;
            cpuValues.fill(0);

            memValues.length = samples;
            memValues.fill(0);
            const stats = reactive({
                CPU: 0,
                RAM: 0
            });
            const drawChart = (canvasObject, values, title) => {
                return new Chart(canvasObject,
                    {
                        type: 'line',
                        data: {
                            labels: labels,
                            datasets: [
                                {
                                    label:title,
                                    data: values,
                                    backgroundColor: 'rgba(255, 99, 132, 0.1)',
                                    borderColor: 'rgb(255, 99, 132)',
                                    borderWidth: 2,
                                    lineTension: 0.25,
                                    pointRadius: 0
                                }
                            ]
                        },
                        options: {
                            responsive: true,
                            showTooltips: false,
                            plugins: {
                                title: {
                                    display: true,
                                    text:title
                                }
                            },
                            legend: false,
                        }
                    });
            }
            const useMemory = () => {
                axios.post('/ram').then(r => console.log(r)).catch(e => console.error(e));
            }
            const useCPU = () => {
                axios.post('/cpu').then(r => console.log(r)).catch(e => console.error(e));
            }
            const addData=(chart, label, data) =>{
                chart.data.labels.push(label);
                chart.data.datasets.forEach((dataset) => {
                    dataset.data.push(data);
                });
                chart.update();
            }
            const removeData=(chart)=> {
                chart.data.labels.pop();
                chart.data.datasets.forEach((dataset) => {
                    dataset.data.pop();
                });
                chart.update();
            }
            onMounted(() => {
                let cpuCanvas= document.getElementById('cpu').getContext('2d');
                let ramCanvas = document.getElementById('ram').getContext('2d');
                let cpuChart = drawChart(cpuCanvas,cpuValues,`CPU Usage`);
                let ramChart = drawChart(ramCanvas,memValues,`RAM Usage`);
                connection.start().then(() => {
                    connection.invoke("GetMonitor").catch((err) => {
                        console.error(err);
                    });
                });
                connection.on('SendMonitorData', (data) => {
                    let json = JSON.parse(data);
                    stats.CPU = json.CPU;
                    stats.RAM = json.RAM;
                    addData(cpuChart,new Date().toTimeString().split(' ')[0],json.CPU);
                    addData(ramChart,new Date().toTimeString().split(' ')[0],json.RAM);
                    if(cpuChart.data.labels.length>sample)
                    {
                        removeData(cpuChart,new Date().toTimeString().split(' ')[0],json.CPU);
                        removeData(ramChart,new Date().toTimeString().split(' ')[0],json.RAM);
                    }
                });
            });
            return { stats, useMemory, useCPU };
        }
    }).mount("#app");
</script>
