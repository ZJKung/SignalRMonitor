@{
    ViewData["Title"] = "Home Page";
}
<script src="~/js/signalr/dist/browser/signalr.js"></script>
<script src="https://unpkg.com/vue@next"></script>
<script src="https://unpkg.com/@@vueuse/shared"></script>
<script src="https://unpkg.com/@@vueuse/core"></script>
<script src="https://www.chartjs.org/dist/2.9.4/Chart.min.js"></script>

<body>
    <div class="text-center" id="app">
        <div>
            <span>CPU : {{stats.CPU}} % </span><span> Memory Usage : {{stats.RAM}} MB</span>
            <input type="button" value="Use Memory" @@click="useMemory()">
            <input type="button" value="Use CPU" @@click="useCPU()">
        </div>

        <div>
            <canvas id="cpu" style="width: 512px; height: 320px"></canvas>
            <canvas id="ram" style="width: 512px; height: 320px"></canvas>
        </div>

    </div>
</body>
<script>
    const { watch, onMounted, reactive } = Vue;
    const app = Vue.createApp({
        setup() {
            const connection = new signalR.HubConnectionBuilder().withUrl("/statsHub").build();
            const samples = 100;
            const speed = 250;
            const cpuValues = reactive([])
            const memValues = reactive([])
            const labels = [];
            labels.length = samples;
            labels.fill(0);
            cpuValues.length = samples;
            cpuValues.fill(0);

            memValues.length = samples;
            memValues.fill(0);
            const stats = reactive({
                CPU: 0,
                RAM: 0
            });
            const drawChart = (canvasObject, values, title) => {
                return new Chart(canvasObject,
                    {
                        type: 'line',
                        data: {
                            labels: labels,
                            datasets: [
                                {
                                    data: values,
                                    backgroundColor: 'rgba(255, 99, 132, 0.1)',
                                    borderColor: 'rgb(255, 99, 132)',
                                    borderWidth: 2,
                                    lineTension: 0.25,
                                    pointRadius: 0
                                }
                            ]
                        },
                        options: {
                            responsive: false,
                            /*animation: {
                                duration: speed * 1.5,
                                easing: 'linear'
                            },*/
                            title: {
                                display: true,
                                text: title
                            },
                            legend: false,
                            scales: {
                                xAxes: [
                                    {
                                        display: false
                                    }
                                ],
                                yAxes: [

                                ]
                            }
                        }
                    });
            }
            const useMemory = () => {
                connection.invoke("UseMemory").catch((err) => {
                    console.error(err);
                });
            }
            const useCPU = () => {
                connection.invoke("UseCPU").catch(err => {
                    console.error(err)
                });
            }
            onMounted(() => {
                connection.start().then(() => {
                    connection.invoke("GetMonitor").catch((err) => {
                        console.error(err);
                    });
                });
                connection.on('SendMonitorData', (data) => {
                    let json = JSON.parse(data);
                    stats.CPU = json.CPU;
                    stats.RAM = json.RAM;
                    cpuValues.push(stats.CPU);
                    cpuValues.shift();
                    memValues.push(stats.RAM);
                    memValues.shift();
                });
            });
            watch(cpuValues, value => {
                let cpuChart = drawChart(document.getElementById("cpu"), cpuValues, `CPU Usage ${cpuValues[cpuValues.length - 1]} %`);
                cpuChart.update();
            })
            watch(memValues, value => {
                let memChart = drawChart(document.getElementById("ram"), memValues, `RAM Usage ${memValues[memValues.length - 1]} MB`);
                memChart.update();
            })
            return { stats, useMemory, useCPU };
        }
    }).mount("#app");
</script>
